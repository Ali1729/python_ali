What are the benefits of OOP?

Benefits of OOP include:

    Modularity. Encapsulation enables objects to be self-contained, making troubleshooting and collaborative development easier.

    Reusability. Code can be reused through inheritance, meaning a team does not have to write the same code multiple times.

    Productivity. Programmers can construct new programs quicker through the use of multiple libraries and reusable code.

    Easily upgradable and scalable. Programmers can implement system functionalities independently.

    Interface descriptions. Descriptions of external systems are simple, due to message passing techniques that are used for objects communication.

    Security. Using encapsulation and abstraction, complex code is hidden, software maintenance is easier and internet protocols are protected.

    Flexibility. Polymorphism enables a single function to adapt to the class it is placed in. Different objects can also pass through the same interface.


------------------------------------------------------------------------------------------------------

    Encapsulation. This principle states that all important information is contained inside an object and only select information is exposed. The implementation and state of each object are privately held inside a defined class. Other objects do not have access to this class or the authority to make changes. They are only able to call a list of public functions or methods. This characteristic of data hiding provides greater program security and avoids unintended data corruption.

    Abstraction. Objects only reveal internal mechanisms that are relevant for the use of other objects, hiding any unnecessary implementation code. The derived class can have its functionality extended. This concept can help developers more easily make additional changes or additions over time.

    Inheritance. Classes can reuse code from other classes. Relationships and subclasses between objects can be assigned, enabling developers to reuse common logic while still maintaining a unique hierarchy. This property of OOP forces a more thorough data analysis, reduces development time and ensures a higher level of accuracy.

    Polymorphism. Objects are designed to share behaviors and they can take on more than one form. The program will determine which meaning or usage is necessary for each execution of that object from a parent class, reducing the need to duplicate code. A child class is then created, which extends the functionality of the parent class. Polymorphism allows different types of objects to pass through the same interface.

    ---------------------------------

    What is driving us to do OOP, if we are able to do the same functionality in functional approach ???

    Java is completely class based.  (Java is 90% OOP, few data types are not oop)
    Python is fully oop, even thought is not fully using clases.

    Functions and importing modules are to support for reuse and organizing code to understand , what is happening.

    But these wont help in mapping the functionality with realtime 


    Along with 
        Reuse CODE.
        ORGANISING CODE.
        mapping with realtime.
        
    -----------------------------------


